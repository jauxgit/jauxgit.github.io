<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2021/12/01/Java%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/12/01/Java%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><h2 id="Day01"><a href="#Day01" class="headerlink" title="Day01"></a>Day01</h2><h3 id="计算机方面的初入了解"><a href="#计算机方面的初入了解" class="headerlink" title="计算机方面的初入了解"></a>计算机方面的初入了解</h3><ul><li><p>基本组成</p><ul><li>软件</li><li>硬件</li></ul></li><li><p>Windows基础快捷键</p><ul><li>ALT+F4，窗口关闭</li><li>CTRL+C，复制</li><li>CTRL+Z，重写</li><li>CTRL+V，粘贴</li><li>CTRL+S，保存</li><li>CTRL+X，剪切</li><li>CTRL+A，全选</li></ul></li><li><p>cmd命令</p><ul><li><p>Dos指令</p><ul><li>查看目录下的所有文件，dir</li><li>切换目录，cd </li><li>清理屏幕，cls</li><li>退出终端，exit</li><li>盘符切换，输入磁盘对象字母</li><li>查询电脑IP，ipconfig</li></ul></li></ul></li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><p>了解博客的重要性</p></li><li><p>如何写博客</p></li><li><p>写博客的途径</p><ul><li>博客园</li><li>CSDN</li><li>自建</li></ul></li></ul><h3 id="了解MarkDownd的基本语法"><a href="#了解MarkDownd的基本语法" class="headerlink" title="了解MarkDownd的基本语法"></a>了解MarkDownd的基本语法</h3><ul><li>段落代码</li><li>超链接的引用</li><li>图片的插入</li><li>代码的写入</li></ul><h2 id="Day02"><a href="#Day02" class="headerlink" title="Day02"></a>Day02</h2><h3 id="初入Java的准备"><a href="#初入Java的准备" class="headerlink" title="初入Java的准备"></a>初入Java的准备</h3><ul><li><p>环境的配置</p><ul><li><p>Java环境</p><ul><li><p>开发包</p><ul><li><p>JDK（开发人员）</p><ul><li>JRE（开发人员调试使用的Java运行环境）</li><li>lib（bin目录下的工具所需运行类库）</li><li>bin（java，javac，等工具文件）</li></ul></li><li><p>JRE（非开发人员首选项）</p></li><li><p>JVM</p><ul><li><p>跨平台</p><ul><li>Windows</li><li>Linux</li><li>Mac</li></ul></li></ul></li></ul></li><li><p>配置变量环境</p></li></ul></li><li><p>安装Java开发软件</p><ul><li>IDEA</li><li>Eclipse</li></ul></li></ul></li><li><p>了解Java</p><ul><li><p>诞生</p><ul><li>长久以来，C和Java始终保持在第一阵营，可见热门度超高。C++则结合了C的优点和面向对象的思想，成为很多对偏底层或性能上要求较高的首选开发语言。Sun想建立一个没有指针，没有内存管理，真正可移植执行的，编写一次，到处运行的语言。</li></ul></li><li><p>三大版本</p><ul><li>JavaSE：标准版（桌面程序，控制台开发…）</li><li>JavaME：嵌入式开发（手机，小家电…）</li><li>JavaEE：E企业级开发（WEb端，服务开发…）</li></ul></li><li><p>特点及优势</p><ul><li>简单性</li><li>可移植性</li><li>高性能</li><li>分布式</li><li>动态性</li><li>多线程</li><li>安全性</li><li>健壮性</li><li>面向对象</li></ul></li></ul></li><li><p>学会编写简单的HelloWord</p><ul><li><p>使用cmd命令执行</p><ul><li><p>Javac，编译</p><ul><li>通过cmd命令执行javac会在 .java 旁边生成一个class文件</li></ul></li><li><p>Java，运行</p></li></ul></li><li><p>了解public static void main(String[] args)语句的含义</p></li></ul></li></ul><h2 id="Day03"><a href="#Day03" class="headerlink" title="Day03"></a>Day03</h2><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><ul><li><p>基础了解</p><ul><li><p>标识符</p><ul><li><p>注意点</p><ul><li>1.所有标识符都应该以字母大/小写，美元符（$），下划线（_）或者数字的任何字符结合。</li><li>2.不能使用关键字作为变量名或者方法名。</li><li>3.标识符第一位不能使用数字，#，-，这类，例如：123ds，-sds，#Word。</li><li>4.大小写敏感，不是一个类型。</li></ul></li></ul></li><li><p>数据类型</p><ul><li><p>基本数据类型</p><ul><li><p>数值类型</p><ul><li><p>整型</p><ul><li>byte，占一个字节</li><li>short，占两个字节</li><li>int，占四个字节</li><li>long，占8个字节</li></ul></li><li><p>浮点型</p><ul><li>float，占4个字节</li><li>double，占8个字节</li></ul></li><li><p>字符类型，占2个字节</p></li></ul></li><li><p>boolean类型，占一位。只有true（1），false（0）</p></li></ul></li><li><p>引用数据类型</p><ul><li>类</li><li>接口</li><li>数组</li></ul></li></ul></li><li><p>基本运算符</p><ul><li><p>算数运算符</p><ul><li>+，-，*，/，%，++，–</li></ul></li><li><p>赋值运算符</p><ul><li><p>拓展</p><ul><li>+=，-=，*=，/=</li></ul></li><li><p>符号</p><ul><li>=</li></ul></li></ul></li><li><p>关系运算符</p><ul><li>&lt;，&gt;，&lt;=，&gt;=，==，!=</li></ul></li><li><p>逻辑运算符</p><ul><li>&amp;&amp;，||，！</li></ul></li><li><p>位运算符</p><ul><li>&amp;，|，^，~，&gt;&gt;，&lt;&lt;，&gt;&gt;&gt;（了解即可）</li></ul></li><li><p>条件运算符</p><ul><li><p>？</p></li><li><p>三元运算符</p><ul><li>x ? y :z</li></ul></li></ul></li></ul></li></ul></li><li><p>习惯</p><ul><li><p>注解（重要）</p><ul><li><p>单行注解，（//）</p></li><li><p>多行注解，（/**/）</p></li><li><p>文档注解，javaDoc，（/** */）</p></li></ul></li><li><p>编写代码要规范，优美</p></li></ul></li></ul><h2 id="Day04"><a href="#Day04" class="headerlink" title="Day04"></a>Day04</h2><h3 id="java基础"><a href="#java基础" class="headerlink" title="java基础"></a>java基础</h3><ul><li><p>类型转换</p><ul><li><p>注意</p><ul><li>1.不能对布尔值进行转换</li><li>2.不能把对象类型转换为不相干的类型 </li><li>3.转换的时候可能存在内存溢出，或者精度问题</li></ul></li><li><p>转换顺序，低—-&gt;高</p><ul><li>byte，short，char—&gt;int—&gt;long—&gt;float— <blockquote><p>double</p></blockquote></li></ul></li><li><p>类型</p><ul><li>强制类型转换，(类型)变量名 ，高—&gt;低</li><li>自动类型转换，低—&gt;高</li></ul></li></ul></li><li><p>变量&amp;常量</p><ul><li><p>变量</p><ul><li><p>变量了解</p><ul><li>简单解释：可以变化的量。</li><li>java变量是程序中最基本的储存单元，其要素包括变量名，变量类型和作用域。</li></ul></li><li><p>注意事项</p><ul><li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li><li>变量名必须是合法的标识符。</li><li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束。</li></ul></li><li><p>类型</p><ul><li><p>局部变量</p><ul><li><p>必须声明和初始化值。</p><ul><li>public class java {<br>public static void main(String[] args) {<br>int i = 10;<br>System.out.println(i);<br>}<br>}</li></ul></li><li><p>类的方法中的变量：属于方法本身。</p></li></ul></li><li><p>实例变量</p><ul><li><p>独立于方法之外的变量，不过没有static修饰；属于实例。</p><ul><li>public class java {<br>int i;<br>public static void main(String[] args) {<br>java15 java15 = new java15();<br>System.out.println(java15.i);<br>}<br>}</li></ul></li></ul></li><li><p>类变量</p><ul><li><p>又称为静态变量，独立于方法之外的变量，用static修饰；属于类的本身。</p><ul><li>public class java15 {<br>static int i;<br>public static void main(String[] args) {</li></ul></li></ul></li></ul></li></ul><p>  System.out.println(java15.i);<br>}<br>}</p></li><li><p>常量</p><ul><li><p>常量了解</p><ul><li>常量：初始化不能后不能改变的值。<br>final  int i = 10;</li></ul></li></ul></li></ul></li><li><p>包机制</p><ul><li><p>为了更好的组织类，java提供了包机制，用于区别类名的命名空间。</p></li><li><p>语法格式</p><ul><li>在Idea软件中通过右键scr文件，点击New——package创建。</li><li>package com.java; </li></ul></li></ul></li><li><p>作用域</p><ul><li>public</li><li>protected</li><li>省缺</li><li>private</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数据库学习之六</title>
      <link href="/2021/11/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%AD/"/>
      <url>/2021/11/30/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%85%AD/</url>
      
        <content type="html"><![CDATA[<h2 id="常见数据库对象"><a href="#常见数据库对象" class="headerlink" title="常见数据库对象"></a>常见数据库对象</h2><h3 id="子程序"><a href="#子程序" class="headerlink" title="子程序"></a>子程序</h3><blockquote><p>子程序包括存储过程、自定义函数、游标、触发器。可以被编译和存储在数据库中，它具有模块化、重用性、可维护性、可扩展性、安全性等特点。其目的是完成特定的功能，能被程序和客户端工具直接调用。子程序也属于数据库对象，可以被授权能否执行。</p></blockquote><h4 id="创建存储过程"><a href="#创建存储过程" class="headerlink" title="创建存储过程"></a>创建存储过程</h4><p>关键语法</p><pre class="line-numbers language-none"><code class="language-none">create procedure 存储过程名([IN|OUT|INOUT] 参数名 数据类型)begin……end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对存储过程进行参数定义时，多个参数用 <code>，</code> 分割，共有三种参数类型：<code>IN</code>，<code>OUT</code>，<code>INOUT</code>：</p><ul><li>IN:参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不会影响调用环境的数据值；</li><li>OUT:该值可在存储过程内部被改变，同时引起调用环境中数据值的改变；</li><li>INOUT:调用时指定，兼具 <code>IN</code> 和 <code>OUT</code> 类型参数的特点。</li></ul><p>以 <code>begin</code> 和 <code>end</code> 对过程体的开始和结束进行标识。</p><p><strong>注意：MySQL 中存储过程默认以 <code>；</code> 结束符，如果不改变结束符，编译器会把存储过程当成 SQL 语句进行处理，因此编译过程会报错</strong>。所以要事先用 <code>DELIMITER //</code> （//可以替换任意字符）声明当前的分隔符，其目的是让编译器把两个 <code>//</code> 之间的内容当作一个存储过程，使用 <code>DELIMITER ;</code> 则恢复结束符为 <code>;</code> </p><hr><p><strong>完整的过程如下：</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//    #声明结束符</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> demo1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> city <span class="token keyword">limit</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token comment">// #存储过程定义结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; delimiter &#x2F;&#x2F;    #声明结束符mysql&gt; create procedure demo1()    -&gt; begin    -&gt; select * from city limit 5;    -&gt; end &#x2F;&#x2F; #存储过程定义结束Query OK, 0 rows affected (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存储创建成功使用<code>call demo1() //</code>调用</p><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; call demo1() &#x2F;&#x2F;+----+----------------+-------------+---------------+------------+| ID | Name           | CountryCode | District            | Population |+----+----------------+-------------+---------------+------------+|  1 | Kabul                | AFG         | Kabol                 |    1780000 ||  2 | Qandahar         | AFG         | Qandahar          |     237500 ||  3 | Herat               | AFG         | Herat                 |     186800 ||  4 | Mazar-e-Sharif | AFG         | Balkh                 |     127800 ||  5 | Amsterdam      | NLD         | Noord-Holland |     731200 |+----+----------------+-------------+---------------+------------+5 rows in set (0.00 sec)Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建带有一个参数的存储过程，其作用是获取 city 表的前 n 条记录，n 是参数</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">procedure</span> demo2<span class="token punctuation">(</span><span class="token operator">in</span> n <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> city <span class="token keyword">limit</span> n<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">//   #存储过程定义结束</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>调用<code>demo2()</code>结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; call demo2(6) &#x2F;&#x2F;+----+----------------+-------------+---------------+------------+| ID | Name           | CountryCode | District      | Population |+----+----------------+-------------+---------------+------------+|  1 | Kabul          | AFG         | Kabol         |    1780000 ||  2 | Qandahar       | AFG         | Qandahar      |     237500 ||  3 | Herat          | AFG         | Herat         |     186800 ||  4 | Mazar-e-Sharif | AFG         | Balkh         |     127800 ||  5 | Amsterdam      | NLD         | Noord-Holland |     731200 ||  6 | Rotterdam      | NLD         | Zuid-Holland  |     593321 |+----+----------------+-------------+---------------+------------+6 rows in set (0.00 sec)Query OK, 0 rows affected (0.01 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意：存储过程的默认参数类型是 in</strong></p><h4 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h4><p>删除存储过程使用 <code>drop procedure</code> 语句，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> 存储过程名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除存储过程 <code>demo2</code>，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">procedure</span> demo2<span class="token comment">//</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop procedure demo2&#x2F;&#x2F;Query OK, 0 rows affected (0.00 sec)mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><blockquote><p>一般我们使用的函数是 MySQL 内置函数（已经写好的），直接调用即可完成某个特定功能。但有些功能内置函数并不能实现，所以出现了自定义函数的实现。</p></blockquote><p>创建自定义函数使用 <code>create function</code> 语句，语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">(</span><span class="token punctuation">[</span>变量名<span class="token number">1</span> 变量类型<span class="token number">1</span>，……，变量名n 变量类型n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> 数据类型<span class="token keyword">begin</span><span class="token keyword">sql</span>语句<span class="token punctuation">;</span>   <span class="token keyword">return</span> 值<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p><strong>使用过程例子如下：</strong></p><ol><li><p>最简单的函数，仅有一条语句，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span>    <span class="token comment">#恢复结束符</span><span class="token keyword">create</span> <span class="token keyword">function</span> myfunc1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span> <span class="token keyword">return</span> <span class="token number">123</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用 <code>myfunc1()</code> 函数，结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> myfunc1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select myfunc1();+-----------+| myfunc1() |+-----------+|       123 |+-----------+1 row in set (0.00 sec)mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义一个函数，实现两个数相加，并返回结果，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> myfunc2<span class="token punctuation">(</span>a <span class="token keyword">int</span><span class="token punctuation">,</span>b <span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用该函数，其结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> myfunc2<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select myfunc2(2,6);+--------------+| myfunc2(2,6) |+--------------+|            8 |+--------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>自定义函数，实现日期固定格式输出，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token comment">//</span><span class="token keyword">create</span> <span class="token keyword">function</span> dateDemo<span class="token punctuation">(</span>fdate <span class="token keyword">datetime</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> x <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">default</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">set</span> x <span class="token operator">=</span> date_format<span class="token punctuation">(</span>fdate<span class="token punctuation">,</span><span class="token string">'%Y年%m月%d日%h时%i分%s秒'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token comment">//</span><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建此函数时，使用<code>declare x varchar(255) default &#39; &#39;</code>语句定义了一个<code>varchar</code>类型的变量 x，长度为 255 字节，默认值为空。set 语句表示给变量 x 赋值。 以当前时间为参数，调用<code>dateDemo()</code>函数，其结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> dateDemo<span class="token punctuation">(</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select dateDemo(now());+----------------------------+| dateDemo(now())            |+----------------------------+| 2021年11月22日09时21分42秒 |+----------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除自定义函数</p><p>删除自定义函数使用<code>drop function</code>语句，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> 函数名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要注意，删除自定义函数时，函数名后面不能加括号，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">function</span> dateDemo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">mysql&gt; drop function dateDemo;Query OK, 0 rows affected (0.00 sec)mysql&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h3><h4 id="视图检查约束"><a href="#视图检查约束" class="headerlink" title="视图检查约束"></a>视图检查约束</h4><p>创建视图的时候，我们可以使用 <code>WITH CHECK OPTION</code> 子句进一步限制 DML。</p><ol><li><p>首先通过 city 为源表建立一个名为 v1 的视图，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> v1<span class="token punctuation">(</span>id<span class="token punctuation">,</span>code<span class="token punctuation">,</span>population<span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">select</span> id<span class="token punctuation">,</span>countrycode<span class="token punctuation">,</span>population <span class="token keyword">from</span> city <span class="token keyword">where</span> population <span class="token operator">></span> <span class="token number">9000000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>该视图存放人口数超过 9000000 城市的 ID、城市代码（code）、人口数量（population）。 查看 v1 结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v1<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+------+------+------------+| id   | code | population |+------+------+------------+|  206 | BRA  |    9968485 ||  939 | IDN  |    9604900 || 1024 | IND  |   10500000 || 1890 | CHN  |    9696300 || 2331 | KOR  |    9981619 || 2822 | PAK  |    9269265 |+------+------+------------+6 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>然后以 v1 为基础视图建立视图 v2，条件设置为人口数量小于 9600000。其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> v2<span class="token punctuation">(</span>id<span class="token punctuation">,</span>code<span class="token punctuation">,</span>population<span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v1 <span class="token keyword">where</span> population <span class="token operator">&lt;</span> <span class="token number">9600000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>查看 v2 结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+------+------+------------+| id   | code | population |+------+------+------------+| 2822 | PAK  |    9269265 |+------+------+------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>我们往 v2 中插入一条 population&gt;9600000 的记录，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> v2 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'PAK'</span><span class="token punctuation">,</span><span class="token number">9710000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看结果如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v2<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+------+------+------------+| id   | code | population |+------+------+------------+| 2822 | PAK  |    9269265 |+------+------+------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>插入数据正常，但是因为插入的数据不符合 v2 视图原本的查询条件，此时结果中并没有显示出新的数据。</p></li><li><p>用建立 v2 视图的方式建立 v3 视图，添加 <code>WITH CHECK OPTION</code>，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> v3<span class="token punctuation">(</span>id<span class="token punctuation">,</span>code<span class="token punctuation">,</span>population<span class="token punctuation">)</span><span class="token keyword">as</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v1 <span class="token keyword">where</span> population <span class="token operator">&lt;</span> <span class="token number">9600000</span><span class="token keyword">with</span> <span class="token keyword">check</span> <span class="token keyword">option</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> v3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+------+------+------------+| id   | code | population |+------+------+------------+| 2822 | PAK  |    9269265 |+------+------+------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>和 v2 中插入数据一样，我们往 v3 中插入一条相同的记录，SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> v3 <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token boolean">null</span><span class="token punctuation">,</span><span class="token string">'PAK'</span><span class="token punctuation">,</span><span class="token number">9710000</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">ERROR 1369 (HY000): CHECK OPTION failed &#39;world.v3&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>错误原因在于，声明 v3 时添加了 <code>WITH CHECK OPTION</code> 约束，对 v3 进行 DML 操作时需以 v3 的 <code>where</code> 条件为 DML 限制条件</p></li></ol><p>对于视图 DML 检查约束，还可以用 <code>LOCAL/ CASCADED</code> 做更精细的控制。</p><p><code>WITH LOCAL CHECK OPTION</code>：对如此声明的视图实施 DML 操作，只考虑当前视图的查询条件为 DML 操作限制。当然，若在视图创建链路上还有基础视图，且基础视图也做了检查约束，DML 也要受相应的限制。</p><p><code>WITH CASCADED CHECK OPTION</code>（CASCADED 为默认，可以省略）：对如此声明的视图实施 DML 操作，不仅要满足当前视图的查询条件，也要满足当前视图创建链路上所有基础视图的查询条件，即便基础视图没有声明 <code>WITH CHECK OPTION</code>。</p><h3 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h3><h4 id="序列的基本操作"><a href="#序列的基本操作" class="headerlink" title="序列的基本操作"></a>序列的基本操作</h4><ol><li><p>创建序列表，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $    <span class="token comment">#设置结束符</span><span class="token keyword">create</span> <span class="token keyword">table</span> sequence<span class="token punctuation">(</span>    <span class="token comment">#序列表名</span>seq_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token comment">#序列名</span>current_value <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span>    <span class="token comment">#序列当前值</span>increment_value <span class="token keyword">int</span> <span class="token operator">not</span> <span class="token boolean">null</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token comment">#序列步长，并设置默认值为1</span><span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span>seq_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">#设置序列表名为主键</span>$    <span class="token comment">#结束SQL语句</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在创建好的序列表中插入两条记录，如下所示：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> sequence <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'seq_num1'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>$    <span class="token comment">#注意此时我没有恢复结束符，所以结束符仍然#是$，本小节后面的演示代码结束符均是$，直到给出说明。序列名seq_num1，当前值为0，步长为1。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> sequence <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'seq_num2'</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>$<span class="token comment">#序列名seq_num2，当前值为0，步长为2。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> sequence $<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+----------+---------------+-----------------+| seq_name | current_value | increment_value |+----------+---------------+-----------------+| seq_num1 |             0 |               1 || seq_num2 |             0 |               2 |+----------+---------------+-----------------+2 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>实现自增，需要用到序列的当前值、下一个值和步长等数据。接下来写一个函数来获取序列当前值，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> current_value<span class="token punctuation">(</span>val_seq_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> val <span class="token keyword">int</span><span class="token punctuation">;</span><span class="token keyword">set</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">select</span> current_value <span class="token keyword">into</span> val <span class="token keyword">from</span> sequence <span class="token keyword">where</span> seq_name <span class="token operator">=</span> val_seq_name<span class="token punctuation">;</span><span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span> $<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该函数中最重要的一句 <code>select current_value into val from sequence where seq_name = val_seq_name; </code>意思是，通过传入的参数（序列名）查询出序列，并把序列名赋值给 val 变量。</p></li><li><p>调用函数查看序列的当前值，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> current_value<span class="token punctuation">(</span><span class="token string">'seq_num1'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+---------------------------+| current_value(&#39;seq_num1&#39;) |+---------------------------+|                         0 |+---------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建函数获取序列的下一个值，序列的下一个值是由当前值加步长得到。其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> next_value<span class="token punctuation">(</span>v_seq_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">begin</span><span class="token keyword">update</span> sequence <span class="token keyword">set</span> current_value <span class="token operator">=</span> current_value <span class="token operator">+</span> increment_value <span class="token keyword">where</span> seq_name <span class="token operator">=</span> v_seq_name<span class="token punctuation">;</span><span class="token keyword">return</span> current_value<span class="token punctuation">(</span>v_seq_name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解析：通过当前值和步长得到了下一个值后，需要更新当前值，所以函数返回的时候调用了<code>current_value()</code>函数。</p></li><li><p>调用获取下一个值函数，查看结果：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> next_value<span class="token punctuation">(</span><span class="token string">'seq_num1'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+-------------------------+| next_vallue(&#39;seq_num1&#39;) |+-------------------------+|                       1 |+-------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建一张新表来测试序列功能，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> test_seq<span class="token punctuation">(</span>id <span class="token keyword">int</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>先在序列表中新增一个序列，当前值设置为 100，步长为 10，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> sequence <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'seq_num3'</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>序列要作用到 test_seq 表中，需要触发器来实现，即自动调用 next_value 函数为新行的 id 赋值，SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> tri_seq before <span class="token keyword">insert</span> <span class="token keyword">on</span> test_seq <span class="token keyword">for each row</span><span class="token keyword">begin</span><span class="token keyword">set</span> new<span class="token punctuation">.</span>id <span class="token operator">=</span> next_value<span class="token punctuation">(</span><span class="token string">'seq_num3'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">;</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>接下来尝试往 test_seq 表中插入 3 条记录，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">insert</span> <span class="token keyword">into</span> test_seq<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test1'</span><span class="token punctuation">)</span>$<span class="token keyword">insert</span> <span class="token keyword">into</span> test_seq<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test2'</span><span class="token punctuation">)</span>$<span class="token keyword">insert</span> <span class="token keyword">into</span> test_seq<span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'test3'</span><span class="token punctuation">)</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3 条不指定 id 值的语句执行完毕。</p></li><li><p>查询 test_seq 表的所有数据，查看 id 是否按照设定的方式进行自增长：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> test_seq$<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+-----+-------+| id  | name  |+-----+-------+| 110 | test1 || 120 | test2 || 130 | test3 |+-----+-------+3 rows in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里简单的说明一下，因为触发器是在插入之前执行的，所以序列的值也是在插入之前改变的，所以此时插入表的第一个值就是 110。</p></li></ol><h4 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h4><p>在 MySQL 中常用的索引可以分为三类，分别是：普通索引、唯一索引、联合索引。</p><p><strong>普通索引</strong></p><p>普通索引使用关键字 INDEX 定义，根据建立索引的时机不同，书写方式有细微差别。分为以下 3 种情况：</p><ul><li>创建表的时候创建索引；</li><li>创建表后创建索引；</li><li>修改表的时候添加索引。</li></ul><p><strong>唯一索引</strong></p><p>唯一索引不仅加速查找，还具有约束性。</p><ul><li>主键索引 <code>primary key</code></li><li>唯一键索引 <code>unique</code></li></ul><p><strong>联合索引</strong></p><p>联合索引即为索引同时设置多个字段。</p><ul><li><code>primary key(id,name)</code>，联合主键索引</li><li><code>index(id,name)</code>，联合普通索引</li></ul><h5 id="索引基本操作"><a href="#索引基本操作" class="headerlink" title="索引基本操作"></a>索引基本操作</h5><ol><li><p>在建表的时候创建索引。其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">index</span> 索引名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建一张 teacher 表，该表有 id、name、age 三个字段，给字段 id 创建索引。其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">index</span> ix_id<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token comment">#给id创建的索引名为ix_id</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>给已经存在的表中某字段添加索引，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>给 teacher 表的 name 字段添加索引，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> ix_name <span class="token keyword">on</span> teacher<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改表时创建索引，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> 表名 <span class="token keyword">add</span> <span class="token keyword">index</span> 索引名<span class="token punctuation">(</span>字段名<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改 teacher 表，给 age 字段添加索引，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> teacher <span class="token keyword">add</span> <span class="token keyword">index</span> ix_age<span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上 3 例仅做语法示范，实际上，不可能给每个字段都加索引。</p></li><li><p>查看索引，借助表信息查看表中是否存在索引，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> 表名<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看 teacher 表中的索引，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">show</span> <span class="token keyword">create</span> <span class="token keyword">table</span> teacher<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none">+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+| Table   | Create Table                                                                                                                                                  |+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+| teacher | CREATE TABLE &#96;teacher&#96; (  &#96;id&#96; int(11) DEFAULT NULL,  &#96;name&#96; varchar(20) DEFAULT NULL,  &#96;age&#96; int(11) DEFAULT NULL) ENGINE&#x3D;InnoDB DEFAULT CHARSET&#x3D;utf8mb4 |+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------+1 row in set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>删除索引，使用的关键字是<code>drop index…on…</code>，其语法如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> 索引名 <span class="token keyword">on</span> 表名<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除 teacher 表中 age 字段的索引，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">drop</span> <span class="token keyword">index</span> ix_id <span class="token keyword">on</span> teacher<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h5 id="索引基本体验"><a href="#索引基本体验" class="headerlink" title="索引基本体验"></a>索引基本体验</h5><ol><li><p>创建一张员工表（employee），包含编号（id）、姓名（name）、年龄（age）三个字段，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> employee<span class="token punctuation">(</span>id <span class="token keyword">int</span><span class="token punctuation">,</span>name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span>age <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>创建存储过程，实现往 employee 表中批量添加数据，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> $<span class="token keyword">create</span> <span class="token keyword">procedure</span> auto_employee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">begin</span><span class="token keyword">declare</span> i <span class="token keyword">int</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token keyword">do</span><span class="token keyword">insert</span> <span class="token keyword">into</span> employee <span class="token keyword">values</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token string">'emp_demo'</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">set</span> i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">end</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>恢复结束符并调用存储过程，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delimiter</span> <span class="token punctuation">;</span><span class="token keyword">call</span> auto_employee<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; call auto_employee();Query OK, 1 row affected (2 min 53.31 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在没有建立索引的情况下，搜索一条不存在的记录，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">200000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from employee where id &#x3D; 200000;Empty set (0.03 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>在已有大量数据的基础上创建索引会比较慢。接下来我们给 id 创建索引，看看耗时情况，其 SQL 语句如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">index</span> ix_id <span class="token keyword">on</span> employee<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>接下来，在建立好索引后，执行之前的 SQL 语句，查看结果如下：</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> employee <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">200000</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输出结果：</p><pre class="line-numbers language-none"><code class="language-none">mysql&gt; select * from employee where id &#x3D; 200000;Empty set (0.00 sec)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ol><p>同样的条件进行查询，速度明显提升。其原理是，没有索引时会发生全表扫面，有索引时，会在表外单独为索引数据建立 <a href="https://blog.csdn.net/chai471793/article/details/99563704">B+</a> 树之类的数据结构；根据 id 查询时，会先在树上进行高效查询，获取对应数据行的地址进而提取数据行中的列。</p><h5 id="索引注意事项"><a href="#索引注意事项" class="headerlink" title="索引注意事项"></a>索引注意事项</h5><ol><li>位数越小的数据类型越好。因为位数越小的数据类型在磁盘、内存和 CPU 缓存中所需要的空间更少，处理起来更快；</li><li>越简单的数据类型越好。整型数据比起字符，处理开销更小，因为字符串的大小比较更复杂。在 MySQL 中，应该用内置的日期和时间数据类型，而不是用字符串来存储时间；或是用整型数据类型存储 IP 地址等；</li><li>尽量避免使用 NULL。应该指定列为 NOT NULL，除非你想存储 NULL。在 MySQL 中，含有空值的列很难进行查询优化，NULL 使得索引、索引的统计信息以及比较运算更加复杂。应该用 0、一个特殊的值或者一个空串代替 NULL。</li><li>列中包含 NULL 值将导致引擎放弃使用索引而进行全表扫描。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>子程序包括存储过程、自定义函数、游标、触发器。可以被编译和存储在数据库中，它具有模块化、重用性、可维护性、可扩展性、安全性等特点；</li><li>存储过程是一种存储复杂程序，方便外部程序调用的数据库对象。是为了完成某个特定功能的 SQL 语句集合，创建存储过程使用的关键字是 <code>create procedure</code> ；</li><li>自定义函数是一种对 MySQL 的扩展，其用法和内置函数相同，创建自定义函数使用的关键字是 <code>create function</code> ；</li><li>游标是一个存储在 MySQL 服务器上面的数据库查询机制，类似于数组的下标。使用游标后，可以根据需要按照特定要求取出数据，创建游标使用的关键字是 <code>declare…cursor</code> ，使用游标前需要先打开；</li><li>触发器（TRIGGER）是一种特殊的存储过程，它在插入、修改或删除表中的数据时触发执行，拥有更精细、更复杂的数据控制能力。创建触发器使用的关键字是 <code>create trigger</code> ；</li><li>视图是从一个或多个表中 “糅合” 出来的虚拟表。一个视图并不包含真实的数据，它提供了另一个视角去查看或改变表中的数据；</li><li>序列就是一组有特定变化规律的整数，其最主要的用途是确保主键数据的唯一性。序列是一个数据库对象，独立于表进行存储，可以为多个表使用；MySQL 中并不支持直接的序列对象创建，而是利用表、函数和触发器来实现类似功能；</li><li>索引在 MySQL 中又叫作 “键” ，英文名 <code>key</code> ，是存储引擎用于快速找到记录的一种数据结构，索引对于性能的提升非常关键。</li></ol><p>另外，通过本章的学习，读者朋友们可以进行扩展学习以下内容：</p><ol><li>利用游标循环读取多条记录，或指定记录；</li><li>学习其它数据库（支持序列对象）中序列对象的创建和使用方法；</li></ol><p><img src="D:\Download\photo\索引.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mysql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
